
// -----------------------------------------------------------------------------
//
// Calculate grid width / percentage
//
// @author: Zurb Foundation
//
// -----------------------------------------------------------------------------

@function grid-calc($colNumber, $totalColumns) {
    @return percentage(($colNumber / $totalColumns));
}

// -----------------------------------------------------------------------------
//
// Grid Rows
//
// VARS:
//
// $behavior   - Row behavior. Default: false. Options: nest, collapse, nest-collapse, false
// $no-columns - Does this row have columns? Default: false. Options: true, false.
// $gutter     - Need to adjust the column gutter? Update here. Default: $column-gutter var. Options: value (px).
// $row-w      - Row max width. Default: $row-width.
//
// @author: Zurb Foundation
//
// -----------------------------------------------------------------------------

@mixin grid-row($behavior: false, $no-columns: false, $gutter: $column-gutter, $row-w: $row-width) {

    // use @include grid-row(nest); to include a nested row
    @if $behavior == nest {
        width: auto;
        margin-#{$default-float}: -($gutter/2);
        margin-#{$opposite-direction}: -($gutter/2);
        margin-top: 0;
        margin-bottom: 0;
        max-width: none;
    }

    // use @include grid-row(collapse); to collapsed a container row margins
    @else if $behavior == collapse {
        width: 100%;
        margin: 0;
        max-width: $row-w;
    }

    // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
    @else if $behavior == nest-collapse {
        width: auto;
        margin: 0;
        max-width: none;
    }

    // use @include grid-row; to use a container row
    @else {
        width: 100%;
        margin-#{$default-float}: auto;
        margin-#{$opposite-direction}: auto;
        margin-top: 0;
        margin-bottom: 0;
        max-width: $row-w;
    }

    // if no columns in this row, apply container right & left padding
    @if $no-columns {
        padding-left: $gutter;
        padding-right: $gutter;
    }

    // Clearfix for all rows
    @include clearfix;

}

// -----------------------------------------------------------------------------
//
// Grid Columns
//
// VARS:
//
// $columns       - The number of columns this should be
// $last-column   - Is this the last column? Default: false.
// $center        - Center these columns? Default: false.
// $offset        - # of columns to offset. Default: false.
// $push          - # of columns to push. Default: false.
// $pull          - # of columns to pull. Default: false.
// $collapse      - Get rid of gutter padding on column? Default: false.
// $float         - Should this float, inline-block, or none? Default: true. Options: true, false, inline, left, right.
// $gutter        - Need to adjust the column gutter? Update here. Default: $column-gutter var. Options: value (px).
// $total-columns - Ability to define a custom number of columns in the row.  Default: $total-columns global var
//
// @author: Zurb Foundation
//
// -----------------------------------------------------------------------------

@mixin grid-column(
    $columns      : false, 
    $last-column  : false, 
    $center       : false, 
    $offset       : false, 
    $push         : false, 
    $pull         : false, 
    $collapse     : false, 
    $float        : true,
    $position     : false,
    $gutter       : $column-gutter,
    $total-columns: $total-columns
) {

    // If positioned for default .column, include relative position
    @if $position {
        position: relative;
    }

    // If collapsed, get rid of gutter padding
    @if $collapse {
        padding-left: 0;
        padding-right: 0;
    }

    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse:null to do nothing)
    @else if $collapse == false {
        padding-left: $gutter/2;
        padding-right: $gutter/2;
    }

    // If a column number is given, calculate width
    @if $columns {
        width: grid-calc($columns, $total-columns);

        // If last column, float naturally instead of to the right
        @if $last-column { float: $opposite-direction; }
    }

    // Source Ordering, adds left/right depending on which you use.
    @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
    @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

    @if $float {
        @if $float == left or $float == true { float: $default-float; }
        @else if $float == right { float: $opposite-direction; }
        @else if $float == inline { display: inline-block; margin-right: -4px; vertical-align: top; }
        @else { float: none; }
    }

    // If centered, get rid of float and add appropriate margins
    @if $center {
        margin-#{$default-float}: auto;
        margin-#{$opposite-direction}: auto;
        float: none;
    }

    // If offset, calculate appropriate margins
    @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

}
